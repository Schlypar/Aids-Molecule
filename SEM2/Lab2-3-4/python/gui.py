# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'table.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import (
    QApplication,
    QMainWindow,
    QPushButton,
    QVBoxLayout,
    QPlainTextEdit,
    QWidget,
    QHeaderView,
    QTableWidgetItem,
)
from PyQt5.QtCore import QProcess

import logic


class Ui_MainWindow(object):
    file_raw = open("raw_pointers.txt", "r+")
    file_smart = open("smart_pointers.txt", "r+")

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 310)
        MainWindow.setGeometry(520, 345, 800, 310)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 40, 771, 221))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")

        self.table_layout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.table_layout.setContentsMargins(0, 0, 0, 0)
        self.table_layout.setObjectName("table_layout")

        self.tableWidget = QtWidgets.QTableWidget(self.horizontalLayoutWidget)
        self.tableWidget.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.tableWidget.setSizeAdjustPolicy(
            QtWidgets.QAbstractScrollArea.AdjustToContents
        )
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(4)
        self.tableWidget.setRowCount(6)

        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)

        self.table_layout.addWidget(self.tableWidget)

        header = self.tableWidget.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Stretch)
        header.setSectionResizeMode(1, QHeaderView.Stretch)
        header.setSectionResizeMode(2, QHeaderView.Stretch)
        header.setSectionResizeMode(3, QHeaderView.Stretch)

        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(10, 0, 771, 31))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")

        self.graph_layout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.graph_layout.setContentsMargins(0, 0, 0, 0)
        self.graph_layout.setObjectName("graph_layout")

        self.show_graph = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.show_graph.setObjectName("show_graph")
        self.graph_layout.addWidget(self.show_graph)
        self.show_graph.clicked.connect(self.show_graph_in_another_window)

        self.close_graph = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.close_graph.setObjectName("close_graph")
        self.graph_layout.addWidget(self.close_graph)
        self.close_graph.clicked.connect(self.close_graph_in_another_window)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")

        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(
            _translate("MainWindow", "Smart pointer VS Raw pointer")
        )
        item = self.tableWidget.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "10"))
        item = self.tableWidget.verticalHeaderItem(1)
        item.setText(_translate("MainWindow", "10**2"))
        item = self.tableWidget.verticalHeaderItem(2)
        item.setText(_translate("MainWindow", "10**3"))
        item = self.tableWidget.verticalHeaderItem(3)
        item.setText(_translate("MainWindow", "10**4"))
        item = self.tableWidget.verticalHeaderItem(4)
        item.setText(_translate("MainWindow", "10**5"))
        item = self.tableWidget.verticalHeaderItem(5)
        item.setText(_translate("MainWindow", "10**6"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Raw, sec"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Smart, sec"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Raw/Smart*100"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Smart/Raw*100"))
        self.show_graph.setText(_translate("MainWindow", "Show Graph"))
        self.close_graph.setText(_translate("MainWindow", "Close Graph"))

        self.set_data(
            logic.deserialise_record(self.file_raw),
            logic.deserialise_record(self.file_smart),
        )

    def set_data(self, raw_data: tuple, smart_data: tuple):
        # self.tableWidget.setItem(X, Y, QTableWidgetItem("TEXT"))

        for row_number, raw, smart in zip(range(6), raw_data, smart_data):
            self.tableWidget.setItem(row_number, 0, QTableWidgetItem(str(raw)))
            self.tableWidget.setItem(row_number, 1, QTableWidgetItem(str(smart)))
            self.tableWidget.setItem(
                row_number, 2, QTableWidgetItem(str((raw / smart) * 100))
            )
            self.tableWidget.setItem(
                row_number, 3, QTableWidgetItem(str((smart / raw) * 100))
            )

    def show_graph_in_another_window(self):
        self.process = QProcess()
        self.process.start("python3", ["plot.py"])

    def close_graph_in_another_window(self):
        try:
            self.process.kill()
        except:
            pass


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
